

import pandas as pd
import re
import os

# –ü–∞–ø–∫–∏
input_folder = './input'
output_folder = './output'
os.makedirs(output_folder, exist_ok=True)

# –§–∞–π–ª —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º
product_file = './Products.xlsx'
tnved_col = "G33 (–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –ø–æ –¢–ù –í–≠–î –†–§)"
df_product = pd.read_excel(product_file, sheet_name='–í–≠–î')
product_map = dict(zip(df_product[tnved_col], df_product['–í–∏–¥ –ú–£']))

# ==== –§–£–ù–ö–¶–ò–ò ====
def extract_npk(description):
    desc = str(description).lower().strip()
    desc = re.sub(r'[\s\xa0\u3000]+', ' ', desc)
    # --- —É–¥–∞–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ì–û–°–¢ (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã) ---
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ: –ì–û–°–¢ 2-2013, –ì–û–°–¢ 2081-2010
    desc = re.sub(r'–≥–æ—Å—Ç\s*\d{1,5}-\d{2,4}', '', desc, flags=re.IGNORECASE)
    # –ì–û–°–¢ X‚ÄìXXXX (—Ä–∞–≤–Ω–æ –∫–∞–∫ –∏ X-XXXX): –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä –∏ –≥–æ–¥
    desc = re.sub(r'–≥–æ—Å—Ç\s*\d{1,2}[-‚Äì]\d{3,4}', '', desc, flags=re.IGNORECASE)
    # –ì–û–°–¢ X‚ÄìXXXX‚ÄìXX (–¥–æ–ø. —Å—É—Ñ—Ñ–∏–∫—Å), –Ω–∞–ø—Ä–∏–º–µ—Ä –ì–û–°–¢ 123-456-78
    desc = re.sub(r'–≥–æ—Å—Ç\s*\d{1,5}[-‚Äì]\d{2,4}[-‚Äì]\d{2,4}', '', desc, flags=re.IGNORECASE)
    # –ì–û–°–¢ X‚ÄìXXXX: –ß–∞—Å—Ç—å X
    desc = re.sub(r'–≥–æ—Å—Ç\s*\d{1,5}[-‚Äì]\d{2,4}\s*:\s*—á–∞—Å—Ç—å\s*\d+', '', desc, flags=re.IGNORECASE)
    # –ì–û–°–¢ X‚ÄìXXXX (XXXX)
    desc = re.sub(r'–≥–æ—Å—Ç\s*\d{1,5}[-‚Äì]\d{2,4}\s*\(\d{2,4}\)', '', desc, flags=re.IGNORECASE)
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –ì–û–°–¢ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ –Ω–æ–º–µ—Ä–æ–º (–ì–û–°–¢2-2013)
    desc = re.sub(r'–≥–æ—Å—Ç\d{1,5}[-‚Äì]\d{2,4}', '', desc, flags=re.IGNORECASE)

    # --- —É–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¢–£ ---
    desc = re.sub(r'—Ç—É\s*\d{4}-\d{3}-\d{8}-\d{4}', '', desc, flags=re.IGNORECASE)  # –¢–£ 2181-073-05761695-2016
    desc = re.sub(r'—Ç—É\s*\d{2}\.\d{2}\.\d{2}-\d{3}-\d{8}-\d{4}', '', desc, flags=re.IGNORECASE)  # –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ç–æ—á–∫–∞–º–∏ + –¥–ª–∏–Ω–Ω—ã–π –∫–æ–¥
    desc = re.sub(r'—Ç—É\s*\d{2}\.\d{2}\.\d{2}-\d{3}-\d{4}', '', desc)
    desc = re.sub(r'—Ç—É\s*\d{2}\.\d{2}\.\d{2}-\d{4}-\d{4}', '', desc)
    
    # --- —É–¥–∞–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (10 –ö–ì, 10–∫–≥, 10 –∫–≥, 10Kg, 10.5–∫–≥ –∏ —Ç.–ø.) ---
    # –° –ø—Ä–æ–±–µ–ª–æ–º –∏–ª–∏ –±–µ–∑, —Ü–µ–ª—ã–µ –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞, –ª—é–±—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –±—É–∫–≤
    desc = re.sub(r'(?<!\S)\d+(?:[.,]\d+)?\s*[–∫k][–≥g](?!\S)', '', desc, flags=re.IGNORECASE)
    
    # üîπ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç x-x-x, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    dash_grade_match = re.search(
        r'\b(\d+(?:[.,]\d+)?)\s*-\s*(\d+(?:[.,]\d+)?)\s*-\s*(\d+(?:[.,]\d+)?)\b',
        desc
    )
    if dash_grade_match:
        try:
            n = float(dash_grade_match.group(1).replace(',', '.'))
            p = float(dash_grade_match.group(2).replace(',', '.'))
            k = float(dash_grade_match.group(3).replace(',', '.'))
            n = int(n) if n == int(n) else n
            p = int(p) if p == int(p) else p
            k = int(k) if k == int(k) else k
            return {'N': {'value': n}, 'P': {'value': p}, 'K': {'value': k}}
        except ValueError:
            pass

    # —Ñ–æ—Ä–º–∞—Ç NPK x:x:x –∏–ª–∏ NPK x-x-x –∏–ª–∏ NP(...) x:x
    npk_match = re.search(
        r'\b(?:npk|np)\s*(?:\([^)]+\))?\s*(\d+(?:\.\d+)?)\s*[:-]\s*(\d+(?:\.\d+)?)'
        r'(?:\s*[:-]\s*(\d+(?:\.\d+)?))?',
        desc, re.IGNORECASE
    )
    if npk_match:
        n = float(npk_match.group(1))
        p = float(npk_match.group(2))
        k = float(npk_match.group(3)) if npk_match.group(3) is not None else 0
        n = int(n) if n <= 100 and n == int(n) else (n if n <= 100 else 0)
        p = int(p) if p <= 100 and p == int(p) else (p if p <= 100 else 0)
        k = int(k) if k <= 100 and k == int(k) else (k if k <= 100 else 0)
        return {'N': {'value': n}, 'P': {'value': p}, 'K': {'value': k}}

    # –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º
    elements = {
        'N': {'keywords': [
            r'\b–∞–∑–æ—Ç', r'\bn–∏—Ç—Ä–∞—Ç', r'\bn\s*—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ', r'\b—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\s*–∞–∑–æ—Ç–∞',
            r'\b–∞–º–º–æ–Ω–∏–π–Ω—ã–π\s*–∞–∑–æ—Ç', r'\b–Ω–∏—Ç—Ä–∞—Ç', r'\bn\s*–æ–±—â–∏–π', r'\b–∞–º–º–∏–∞—á–Ω—ã–π\s*–∞–∑–æ—Ç'
        ], 'value': 0},
        'P': {'keywords': [
            r'\b—Ñ–æ—Å—Ñ–æ—Ä', r'\bp2o5', r'\b–ø2–æ5', r'\bphosphorus',
            r'\b—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\s*—Ñ–æ—Å—Ñ–æ—Ä–∞', r'\b—Ñ–æ—Å—Ñ–∞—Ç—ã'
        ], 'value': 0},
        'K': {'keywords': [
            r'\b–∫–∞–ª–∏[–π—è–∏–µ]', r'\bk2o', r'\b–∫–∞–ª–∏–π–Ω—ã–µ', r'\b—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\s*–∫–∞–ª–∏—è'
        ], 'value': 0},
        'Ca': {'keywords': [
            r'\b–∫–∞–ª—å—Ü–∏–π', r'\bcao', r'\bca\s*—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ', r'\b–∏–∑–≤–µ—Å—Ç—å',
            r'\b–∫–∞—Ä–±–æ–Ω–∞—Ç\s*–∫–∞–ª—å—Ü–∞', r'\b—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\s*–∫–∞–ª—å—Ü–∏—è', r'\bcac–æ3'
        ], 'value': 0}
    }
    for el_key, data in elements.items():
        for keyword in data['keywords']:
            pattern = rf'{keyword}\D*?(\d+(?:[,.]\d+)?)(?=\s*(?:%|–º–∞—Å|–≤ –ø–µ—Ä–µ—Å—á—ë—Ç–µ|–º–∞—Ä–∫–∞|–≥–æ—Å—Ç|–ø/–ø|–∫–≥|–ª|–ª–∏—Ç—Ä–æ–≤|–ª–∏—Ç—Ä–∞|–º–µ—à–∫|–ø–∞–∫–µ—Ç|—É–ø–∞–∫–æ–≤–∫|–ø–æ—Ä–æ—à–æ–∫|–≥—Ä–∞–Ω—É–ª—ã|—Ç–∞–±–ª–µ—Ç–∫|–≤–µ—Å|–±—Ä—É—Ç—Ç–æ|–Ω–µ—Ç—Ç–æ|–ø–ª–∞—Å—Ç–∏–∫|–±—É–º–∞–∂–Ω|–ø–æ–¥–¥–æ–Ω|–ø–∞–ª–ª–µ—Ç|–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω|–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è|–≤—Ö–æ–¥–∏—Ç|—Å–æ–¥–µ—Ä–∂–∏—Ç|—Å–æ—Å—Ç–∞–≤|–º–∞—Ä–∫–∞|–Ω–µ –±–æ–ª–µ–µ|–Ω–µ –º–µ–Ω–µ–µ|–Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç|–º–∏–Ω–∏–º—É–º|–º–∞–∫—Å–∏–º—É–º|,|\.|;|:|$))'
            match = re.search(pattern, desc, re.IGNORECASE)
            if match:
                try:
                    value = float(match.group(1).replace(',', '.'))
                    if value > 100:
                        value = 0
                    data['value'] = int(value) if value == int(value) else value
                except ValueError:
                    continue
                break

    k2o_match = re.search(r'–≤\s–ø–µ—Ä–µ—Å—á[—ë–µ]—Ç–µ.?k2o\D*(\d+(?:[,.]\d+)?)', desc, re.IGNORECASE)
    if k2o_match:
        try:
            k_value = float(k2o_match.group(1).replace(',', '.'))
            elements['K']['value'] = int(k_value) if k_value == int(k_value) else k_value
        except ValueError:
            pass

    # –ù–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: –ø—Ä–æ—Å—Ç–æ "–ö–ê–õ–ò–Ø –í –ü–ï–†–ï–°–ß–ï–¢–ï –ù–ê K2O - 50%" –∏–ª–∏ "K2O - 50%"
    k2o_simple = re.search(r'(?:–∫–∞–ª–∏—è\s–≤\s–ø–µ—Ä–µ—Å—á[—ë–µ]—Ç–µ\s–Ω–∞\s)?k2o\D*(\d+(?:[,.]\d+)?)', desc, re.IGNORECASE)
    if k2o_simple and not elements['K']['value']:
        try:
            k_value = float(k2o_simple.group(1).replace(',', '.'))
            elements['K']['value'] = int(k_value) if k_value == int(k_value) else k_value
        except ValueError:
            pass

    p2o5_match = re.search(r'–≤\s–ø–µ—Ä–µ—Å—á[—ë–µ]—Ç–µ.?p2o5\D*(\d+(?:[,.]\d+)?)', desc, re.IGNORECASE)
    if p2o5_match:
        try:
            p2o5_value = float(p2o5_match.group(1).replace(',', '.'))
            elements['P']['value'] = int(p2o5_value * 0.436) if (p2o5_value * 0.436) == int(p2o5_value * 0.436) else p2o5_value * 0.436
        except ValueError:
            pass

    # –ù–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: –ø—Ä–æ—Å—Ç–æ "P2O5 - 46%"
    p2o5_simple = re.search(r'p2o5\D*(\d+(?:[,.]\d+)?)', desc, re.IGNORECASE)
    if p2o5_simple and not elements['P']['value']:
        try:
            p2_value = float(p2o5_simple.group(1).replace(',', '.'))
            elements['P']['value'] = int(p2_value * 0.436) if (p2_value * 0.436) == int(p2_value * 0.436) else p2_value * 0.436
        except ValueError:
            pass

    # –ü–æ–∏—Å–∫ —Ñ–æ—Å—Ñ–æ—Ä–Ω–æ–≥–æ –∞–Ω–≥–∏–¥—Ä–∏–¥–∞
    p_anhydride = re.search(r'—Ñ–æ—Å—Ñ–æ—Ä–Ω\w*\s–∞–Ω–≥–∏–¥—Ä–∏–¥\D*(\d+(?:[,.]\d+)?)', desc, re.IGNORECASE)
    if p_anhydride and not elements['P']['value']:
        try:
            p_val = float(p_anhydride.group(1).replace(',', '.'))
            elements['P']['value'] = p_val
        except ValueError:
            pass

    # –ù–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: "–ú–ê–°–°–û–í–ê–Ø –î–û–õ–Ø –ê–ó–û–¢–ê - 18%"
    n_mass = re.search(r'–∞–∑–æ—Ç\w*\D*(\d+(?:[,.]\d+)?)', desc, re.IGNORECASE)
    if n_mass and not elements['N']['value']:
        try:
            n_val = float(n_mass.group(1).replace(',', '.'))
            elements['N']['value'] = n_val
        except ValueError:
            pass

    # –ù–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "–°–û–î–ï–†–ñ–ê–©–ò–ô 46,2 –ú–ê–°.% –ê–ó–û–¢–ê"
    n_contains = re.search(r'—Å–æ–¥–µ—Ä–∂\w*\D*(\d+(?:[,.]\d+)?)\s*–º–∞—Å\.?%[^–∞-—è]*–∞–∑–æ—Ç', desc, re.IGNORECASE)
    if n_contains and not elements['N']['value']:
        try:
            n_val = float(n_contains.group(1).replace(',', '.'))
            elements['N']['value'] = n_val
        except ValueError:
            pass
    # üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–∑–æ—Ç–∞ (N)
    if not elements['N']['value']:
        extra_n_patterns = [
            r'–∞–∑–æ—Ç\w*[^0-9]{0,10}(\d+(?:[.,]\d+)?)\s*%?',
            r'—Å–æ–¥–µ—Ä–∂\w*[^0-9]{0,10}(\d+(?:[.,]\d+)?)\s*–º–∞—Å\.?%[^–∞-—è]*–∞–∑–æ—Ç',
            r'–∞–∑–æ—Ç\w*\D*(\d+(?:[,.]\d+)?)',
            r'—Å–æ–¥–µ—Ä–∂\w*\D*(\d+(?:[,.]\d+)?)\s*–º–∞—Å\.?%[^–∞-—è]*–∞–∑–æ—Ç'
        ]
        for pat in extra_n_patterns:
            m = re.search(pat, desc, re.IGNORECASE)
            if m:
                try:
                    n_val = float(m.group(1).replace(',', '.'))
                    if n_val <= 100:
                        elements['N']['value'] = int(n_val) if n_val == int(n_val) else n_val
                        break
                except ValueError:
                    pass

    # üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è P2O5 (P)
    if not elements['P']['value']:
        extra_p_patterns = [
            r'p2o5\D*(\d+(?:[.,]\d+)?)',
            r'—Ñ–æ—Å—Ñ–æ—Ä–Ω\w*\s–∞–Ω–≥–∏–¥—Ä–∏–¥\D*(\d+(?:[,.]\d+)?)',
            r'–≤\s–ø–µ—Ä–µ—Å—á[—ë–µ]—Ç–µ.?p2o5\D*(\d+(?:[,.]\d+)?)'
        ]
        for pat in extra_p_patterns:
            m = re.search(pat, desc, re.IGNORECASE)
            if m:
                try:
                    p_val = float(m.group(1).replace(',', '.'))
                    if p_val <= 100:
                        # –ø–µ—Ä–µ–≤–æ–¥ P2O5 ‚Üí P –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                        if 'p2o5' in pat.lower():
                            p_val = p_val * 0.436
                        elements['P']['value'] = int(p_val) if p_val == int(p_val) else p_val
                        break
                except ValueError:
                    pass

    # üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è K2O (K)
    if not elements['K']['value']:
        extra_k_patterns = [
            r'–∫–∞–ª–∏—è\s–≤\s–ø–µ—Ä–µ—Å—á[—ë–µ]—Ç–µ\s–Ω–∞\sk2o\D*(\d+(?:[,.]\d+)?)',
            r'k2o\D*(\d+(?:[,.]\d+)?)',
            r'–≤\s–ø–µ—Ä–µ—Å—á[—ë–µ]—Ç–µ.?k2o\D*(\d+(?:[,.]\d+)?)',
            r'(?:–∫–∞–ª–∏—è\s–≤\s–ø–µ—Ä–µ—Å—á[—ë–µ]—Ç–µ\s–Ω–∞\s)?k2o\D*(\d+(?:[,.]\d+)?)'
        ]
        for pat in extra_k_patterns:
            m = re.search(pat, desc, re.IGNORECASE)
            if m:
                try:
                    k_val = float(m.group(1).replace(',', '.'))
                    if k_val <= 100:
                        elements['K']['value'] = int(k_val) if k_val == int(k_val) else k_val
                        break
                except ValueError:
                    pass

    return {k: v for k, v in elements.items()}



def determine_grade(description, product):
    result = extract_npk(description)
    n = result['N']['value']
    p = result['P']['value']
    k = result['K']['value']

    n = n if isinstance(n, (int, float)) and 0 < n <= 100 else 0
    p = p if isinstance(p, (int, float)) and 0 < p <= 100 else 0
    k = k if isinstance(k, (int, float)) and 0 < k <= 100 else 0

    if product == '–ö–∞–ª–∏–π':
        n = 0; p = 0
    elif product == 'NP':
        k = 0
    elif product == 'PK':
        n = 0
    elif product == 'NS':
        p = 0; k = 0
    elif product == 'Ca':
        n = 0; p = 0; k = 0

    n = int(n) if isinstance(n, float) and n == int(n) else n
    p = int(p) if isinstance(p, float) and p == int(p) else p
    k = int(k) if isinstance(k, float) and k == int(k) else k

    grade = f"{n}-{p}-{k}"
    return "X-X-X" if grade == "0-0-0" else grade

def check_all_less_than_one(grade):
    if not grade or grade == 'X-X-X':
        return grade
    parts = grade.split('-')
    try:
        nums = [float(x) for x in parts]
        if all(x < 1 for x in nums):
            return ''
    except ValueError:
        pass
    return grade

def check_product_type(row, desc_col):
    if row['Product'] in ['–ù–ü–ö', '–ü—Ä–æ—á–∏–µ NP/NPK']:
        if pd.notna(row[desc_col]) and re.search(r'–≤–æ–¥–æ—Ä–∞—Å—Ç–≤–æ—Ä–∏–º\w*', str(row[desc_col]).lower()):
            return '–í–†–£'
    return ''

allowed_product_types = {
    "–ù–ü–ö","–ú–ê–§","–ö–∞—Ä–±–∞–º–∏–¥","–ü—Ä–æ—á–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–ª–∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è",
    "–ü—Ä–æ—á–∏–µ —Ñ–æ—Å—Ñ–æ—Ä–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è","PK","CAN","AN","–ü—Ä–æ—á–∏–µ NP/NPK",
    "–ù–ü–ö –≤ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö –∏–ª–∏ —É–ø–∞–∫–æ–≤–∫–µ –º–µ–Ω–µ–µ 10 –∫–≥","AS","–ö–ê–°","–ö–∞–ª–∏–π",
    "SOP","–î–ê–§","NP","–ù–∏—Ç—Ä–∞—Ç –Ω–∞—Ç—Ä–∏—è","NS","CN",
    "–ü—Ä–æ—á–∏–µ –∫–∞–ª–∏–π–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è","–£–¥–æ–±—Ä–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–ª–∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è",
    "–ü—Ä–æ—á–∏–µ —Å—É–ø–µ—Ä—Ñ–æ—Å—Ñ–∞—Ç—ã","–°—É–ø–µ—Ä—Ñ–æ—Å—Ñ–∞—Ç—ã"
}

# ==== –¶–ò–ö–õ ====
files = [f for f in os.listdir(input_folder) if f.lower().endswith('.xlsx')]
for i, fname in enumerate(files, 1):
    in_path = os.path.join(input_folder, fname)
    out_path = os.path.join(output_folder, f"{os.path.splitext(fname)[0]} SORTING.xlsx")

    df_source = pd.read_excel(in_path)
    if "G31_1 (–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞)" not in df_source.columns:
        raise KeyError("‚ùå –ù–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ 'G31_1 (–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞)'")

    df_new = df_source.copy()
    df_new['Product'] = df_new[tnved_col].map(product_map)

    df_new['Grade'] = df_new.apply(lambda r: determine_grade(r["G31_1 (–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞)"], r['Product']), axis=1)
    df_new['Grade'] = df_new.apply(lambda r: r['Grade'] if r['Product'] in allowed_product_types else '', axis=1)
    df_new['Grade'] = df_new['Grade'].apply(check_all_less_than_one)

    df_new['Product Type'] = df_new.apply(check_product_type, axis=1, desc_col="G31_1 (–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞)")

    with pd.ExcelWriter(out_path, engine='openpyxl') as writer:
        df_new.to_excel(writer, sheet_name='–õ–∏—Å—Ç 1', index=False)

    print(f"‚úÖ {i}/{len(files)} –≥–æ—Ç–æ–≤–æ ‚Üí {out_path}")

print("üéØ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
